// <auto-generated />
using System;
using DreamBook.Persistence.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DreamBook.Persistence.Migrations.Sqlite
{
    [DbContext(typeof(DreamBookSqliteContext))]
    [Migration("20220125171312_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("DreamBook.Domain.Entities.Ad", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Source")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.ToTable("Ad");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.AdTranslation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AdGuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LanguageGuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.HasIndex("AdGuid");

                    b.HasIndex("LanguageGuid");

                    b.ToTable("AdTranslation");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Book", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.BookTranslation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BookGuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LanguageGuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.HasIndex("BookGuid");

                    b.HasIndex("LanguageGuid");

                    b.ToTable("BookTranslation");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Dream", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuthorGuid")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CanBeShared")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<bool>("MovedToRecycleBin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfViews")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TypeGuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Weather")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.HasIndex("AuthorGuid");

                    b.HasIndex("TypeGuid");

                    b.ToTable("Dream");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.DreamType", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.ToTable("DreamType");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.DreamTypeTranslation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DreamTypeGuid")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LanguageGuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.HasIndex("DreamTypeGuid");

                    b.HasIndex("LanguageGuid");

                    b.ToTable("DreamTypeTranslation");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.DreamWord", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DreamGuid")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("WordGuid")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.HasIndex("DreamGuid");

                    b.HasIndex("WordGuid");

                    b.ToTable("DreamWord");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Interpretation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BookGuid")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("WordGuid")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.HasIndex("BookGuid");

                    b.HasIndex("WordGuid");

                    b.ToTable("Interpretation");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.InterpretationTranslation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BookGuid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BookTranslationGuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("InterpretationGuid")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LanguageGuid")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("WordGuid")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.HasIndex("BookGuid");

                    b.HasIndex("BookTranslationGuid");

                    b.HasIndex("InterpretationGuid");

                    b.HasIndex("LanguageGuid");

                    b.HasIndex("WordGuid");

                    b.ToTable("InterpretationTranslation");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Language", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryGuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.HasIndex("CategoryGuid");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.PostCategory", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.ToTable("PostCategory");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.PostCategoryTranslation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryGuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LanguageGuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.HasIndex("CategoryGuid");

                    b.HasIndex("LanguageGuid");

                    b.ToTable("PostCategoryTranslation");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AvatarImage")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Word", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.ToTable("Word");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.WordTranslation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LanguageGuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("WordGuid")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.HasIndex("LanguageGuid");

                    b.HasIndex("WordGuid");

                    b.ToTable("WordTranslation");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.AdTranslation", b =>
                {
                    b.HasOne("DreamBook.Domain.Entities.Ad", "Ad")
                        .WithMany("Translations")
                        .HasForeignKey("AdGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamBook.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ad");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.BookTranslation", b =>
                {
                    b.HasOne("DreamBook.Domain.Entities.Book", "Book")
                        .WithMany("Translations")
                        .HasForeignKey("BookGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamBook.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Dream", b =>
                {
                    b.HasOne("DreamBook.Domain.Entities.User", "Author")
                        .WithMany("Dreams")
                        .HasForeignKey("AuthorGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DreamBook.Domain.Entities.DreamType", "Type")
                        .WithMany("Dreams")
                        .HasForeignKey("TypeGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.DreamTypeTranslation", b =>
                {
                    b.HasOne("DreamBook.Domain.Entities.DreamType", "DreamType")
                        .WithMany("Translations")
                        .HasForeignKey("DreamTypeGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamBook.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DreamType");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.DreamWord", b =>
                {
                    b.HasOne("DreamBook.Domain.Entities.Dream", "Dream")
                        .WithMany("Words")
                        .HasForeignKey("DreamGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamBook.Domain.Entities.Word", "Word")
                        .WithMany("Dreams")
                        .HasForeignKey("WordGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dream");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Interpretation", b =>
                {
                    b.HasOne("DreamBook.Domain.Entities.Book", "Book")
                        .WithMany("Interpretations")
                        .HasForeignKey("BookGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamBook.Domain.Entities.Word", "Word")
                        .WithMany("Interpretations")
                        .HasForeignKey("WordGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.InterpretationTranslation", b =>
                {
                    b.HasOne("DreamBook.Domain.Entities.BookTranslation", "Book")
                        .WithMany()
                        .HasForeignKey("BookGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DreamBook.Domain.Entities.BookTranslation", null)
                        .WithMany("Interpretations")
                        .HasForeignKey("BookTranslationGuid");

                    b.HasOne("DreamBook.Domain.Entities.Interpretation", "Interpretation")
                        .WithMany("Translations")
                        .HasForeignKey("InterpretationGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamBook.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DreamBook.Domain.Entities.WordTranslation", "Word")
                        .WithMany("Interpretations")
                        .HasForeignKey("WordGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Interpretation");

                    b.Navigation("Language");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Post", b =>
                {
                    b.HasOne("DreamBook.Domain.Entities.PostCategory", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.PostCategoryTranslation", b =>
                {
                    b.HasOne("DreamBook.Domain.Entities.PostCategory", "PostCategory")
                        .WithMany("Translations")
                        .HasForeignKey("CategoryGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamBook.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PostCategory");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.WordTranslation", b =>
                {
                    b.HasOne("DreamBook.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DreamBook.Domain.Entities.Word", "Word")
                        .WithMany("Translations")
                        .HasForeignKey("WordGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Ad", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Book", b =>
                {
                    b.Navigation("Interpretations");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.BookTranslation", b =>
                {
                    b.Navigation("Interpretations");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Dream", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.DreamType", b =>
                {
                    b.Navigation("Dreams");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Interpretation", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.PostCategory", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.User", b =>
                {
                    b.Navigation("Dreams");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Word", b =>
                {
                    b.Navigation("Dreams");

                    b.Navigation("Interpretations");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.WordTranslation", b =>
                {
                    b.Navigation("Interpretations");
                });
#pragma warning restore 612, 618
        }
    }
}
