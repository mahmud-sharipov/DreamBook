// <auto-generated />
using System;
using DreamBook.Persistence.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DreamBook.Persistence.Migrations.MySql
{
    [DbContext(typeof(DreamBookMySqlContext))]
    partial class DreamBookMySqlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DreamBook.Domain.Entities.Ad", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Source")
                        .HasColumnType("longtext");

                    b.HasKey("Guid");

                    b.ToTable("Ad", (string)null);
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.AdTranslation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AdGuid")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("LanguageGuid")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Guid");

                    b.HasIndex("AdGuid");

                    b.HasIndex("LanguageGuid");

                    b.ToTable("AdTranslation", (string)null);
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Book", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.HasKey("Guid");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.BookTranslation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookGuid")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("LanguageGuid")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Guid");

                    b.HasIndex("BookGuid");

                    b.HasIndex("LanguageGuid");

                    b.ToTable("BookTranslation", (string)null);
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Dream", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AuthorGuid")
                        .HasColumnType("char(36)");

                    b.Property<bool>("CanBeShared")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<bool>("MovedToRecycleBin")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NumberOfViews")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<Guid>("TypeGuid")
                        .HasColumnType("char(36)");

                    b.Property<string>("Weather")
                        .HasColumnType("longtext");

                    b.HasKey("Guid");

                    b.HasIndex("AuthorGuid");

                    b.HasIndex("TypeGuid");

                    b.ToTable("Dream", (string)null);
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.DreamType", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Color")
                        .HasColumnType("longtext");

                    b.HasKey("Guid");

                    b.ToTable("DreamType", (string)null);
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.DreamTypeTranslation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("DreamTypeGuid")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LanguageGuid")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Guid");

                    b.HasIndex("DreamTypeGuid");

                    b.HasIndex("LanguageGuid");

                    b.ToTable("DreamTypeTranslation", (string)null);
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.DreamWord", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DreamGuid")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("WordGuid")
                        .HasColumnType("char(36)");

                    b.HasKey("Guid");

                    b.HasIndex("DreamGuid");

                    b.HasIndex("WordGuid");

                    b.ToTable("DreamWord", (string)null);
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Interpretation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookGuid")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("WordGuid")
                        .HasColumnType("char(36)");

                    b.HasKey("Guid");

                    b.HasIndex("BookGuid");

                    b.HasIndex("WordGuid");

                    b.ToTable("Interpretation", (string)null);
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.InterpretationTranslation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookGuid")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("BookTranslationGuid")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("InterpretationGuid")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LanguageGuid")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("WordGuid")
                        .HasColumnType("char(36)");

                    b.HasKey("Guid");

                    b.HasIndex("BookGuid");

                    b.HasIndex("BookTranslationGuid");

                    b.HasIndex("InterpretationGuid");

                    b.HasIndex("LanguageGuid");

                    b.HasIndex("WordGuid");

                    b.ToTable("InterpretationTranslation", (string)null);
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Language", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Guid");

                    b.ToTable("Language", (string)null);
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoryGuid")
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Guid");

                    b.HasIndex("CategoryGuid");

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.PostCategory", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.HasKey("Guid");

                    b.ToTable("PostCategory", (string)null);
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.PostCategoryTranslation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoryGuid")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("LanguageGuid")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Guid");

                    b.HasIndex("CategoryGuid");

                    b.HasIndex("LanguageGuid");

                    b.ToTable("PostCategoryTranslation", (string)null);
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Word", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.HasKey("Guid");

                    b.ToTable("Word", (string)null);
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.WordTranslation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LanguageGuid")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<Guid>("WordGuid")
                        .HasColumnType("char(36)");

                    b.HasKey("Guid");

                    b.HasIndex("LanguageGuid");

                    b.HasIndex("WordGuid");

                    b.ToTable("WordTranslation", (string)null);
                });

            modelBuilder.Entity("DreamBook.Persistence.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiryOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RevokedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("char(36)");

                    b.HasKey("Guid");

                    b.HasIndex("UserGuid");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("DreamBook.Persistence.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("DreamBook.Persistence.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarImage")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.AdTranslation", b =>
                {
                    b.HasOne("DreamBook.Domain.Entities.Ad", "Ad")
                        .WithMany("Translations")
                        .HasForeignKey("AdGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamBook.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ad");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.BookTranslation", b =>
                {
                    b.HasOne("DreamBook.Domain.Entities.Book", "Book")
                        .WithMany("Translations")
                        .HasForeignKey("BookGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamBook.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Dream", b =>
                {
                    b.HasOne("DreamBook.Persistence.Models.User", null)
                        .WithMany("Dreams")
                        .HasForeignKey("AuthorGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DreamBook.Domain.Entities.DreamType", "Type")
                        .WithMany("Dreams")
                        .HasForeignKey("TypeGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.DreamTypeTranslation", b =>
                {
                    b.HasOne("DreamBook.Domain.Entities.DreamType", "DreamType")
                        .WithMany("Translations")
                        .HasForeignKey("DreamTypeGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamBook.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DreamType");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.DreamWord", b =>
                {
                    b.HasOne("DreamBook.Domain.Entities.Dream", "Dream")
                        .WithMany("Words")
                        .HasForeignKey("DreamGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamBook.Domain.Entities.Word", "Word")
                        .WithMany("Dreams")
                        .HasForeignKey("WordGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dream");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Interpretation", b =>
                {
                    b.HasOne("DreamBook.Domain.Entities.Book", "Book")
                        .WithMany("Interpretations")
                        .HasForeignKey("BookGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamBook.Domain.Entities.Word", "Word")
                        .WithMany("Interpretations")
                        .HasForeignKey("WordGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.InterpretationTranslation", b =>
                {
                    b.HasOne("DreamBook.Domain.Entities.BookTranslation", "Book")
                        .WithMany()
                        .HasForeignKey("BookGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DreamBook.Domain.Entities.BookTranslation", null)
                        .WithMany("Interpretations")
                        .HasForeignKey("BookTranslationGuid");

                    b.HasOne("DreamBook.Domain.Entities.Interpretation", "Interpretation")
                        .WithMany("Translations")
                        .HasForeignKey("InterpretationGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamBook.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DreamBook.Domain.Entities.WordTranslation", "Word")
                        .WithMany("Interpretations")
                        .HasForeignKey("WordGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Interpretation");

                    b.Navigation("Language");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Post", b =>
                {
                    b.HasOne("DreamBook.Domain.Entities.PostCategory", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.PostCategoryTranslation", b =>
                {
                    b.HasOne("DreamBook.Domain.Entities.PostCategory", "PostCategory")
                        .WithMany("Translations")
                        .HasForeignKey("CategoryGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamBook.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PostCategory");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.WordTranslation", b =>
                {
                    b.HasOne("DreamBook.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DreamBook.Domain.Entities.Word", "Word")
                        .WithMany("Translations")
                        .HasForeignKey("WordGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("DreamBook.Persistence.Models.RefreshToken", b =>
                {
                    b.HasOne("DreamBook.Persistence.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("DreamBook.Persistence.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DreamBook.Persistence.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DreamBook.Persistence.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("DreamBook.Persistence.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamBook.Persistence.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DreamBook.Persistence.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Ad", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Book", b =>
                {
                    b.Navigation("Interpretations");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.BookTranslation", b =>
                {
                    b.Navigation("Interpretations");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Dream", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.DreamType", b =>
                {
                    b.Navigation("Dreams");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Interpretation", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.PostCategory", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.Word", b =>
                {
                    b.Navigation("Dreams");

                    b.Navigation("Interpretations");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("DreamBook.Domain.Entities.WordTranslation", b =>
                {
                    b.Navigation("Interpretations");
                });

            modelBuilder.Entity("DreamBook.Persistence.Models.User", b =>
                {
                    b.Navigation("Dreams");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
